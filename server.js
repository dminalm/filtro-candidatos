const express = require("express");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json());

// Flujo de preguntas
const flujoPreguntas = [
  "¬øCu√°ntos a√±os tienes?",
  "¬øCu√°l es tu nacionalidad?",
  "¬øEstudias o trabajas? Si es as√≠, ¬øcu√°les son tus ingresos aproximados?",
  "¬øTrabajas o estudias en el √°mbito sanitario? ¬øEres sanitario?",
  "¬øAlquilar√°s la habitaci√≥n solo/a o con pareja?",
  "¬øVivir√° un menor contigo en la habitaci√≥n?",
  "¬øFumas?",
  "¬øTienes mascotas?",
  "¬øCu√°nto tiempo necesitas la habitaci√≥n?",
  "¬øQuieres a√±adir algo m√°s? Puedes hacerlo libremente."
];

// Memoria temporal en RAM
let candidatos = {}; // { sessionId: { paso, respuestas, esApto, completado } }

// Ruta ra√≠z
app.get("/", (req, res) => {
  res.send("‚úÖ Marina backend funcionando con reglas Apto / No Apto");
});

// Ruta del chat
app.post("/chat", (req, res) => {
  const { mensaje, sessionId } = req.body;
  if (!sessionId) {
    return res.status(400).json({ error: "Falta sessionId" });
  }

  // Inicializar sesi√≥n si no existe
  if (!candidatos[sessionId]) {
    candidatos[sessionId] = {
      paso: -1, // -1 significa que a√∫n no se ha hecho la presentaci√≥n
      respuestas: {},
      esApto: true,
      completado: false,
    };
  }

  const candidato = candidatos[sessionId];
  let respuesta = "";

  // Presentaci√≥n inicial
  if (candidato.paso === -1) {
    candidato.paso = 0;
    respuesta =
      "Hola, soy Marina y le har√© algunas preguntas para encontrar la habitaci√≥n que mejor se adapte a sus necesidades. " +
      "No le pedir√© informaci√≥n privada y protegeremos.\n\n" +
      flujoPreguntas[0];
    return res.json({ respuesta });
  }

  // Guardar la respuesta del usuario a la pregunta anterior
  if (candidato.paso > 0 && candidato.paso <= flujoPreguntas.length) {
    const clave = flujoPreguntas[candidato.paso - 1];
    candidato.respuestas[clave] = mensaje;

    // Evaluar reglas de Apto / No Apto
    if (candidato.paso === 2) {
      // Nacionalidad
      const nacionalidad = mensaje.toLowerCase();
      const noAptos = [
        "√°rabe", "arabe", "africano", "africa", "medio oriente", "musulm√°n", "musulmana",
        "asi√°tico", "asiatica", "asi√°tico", "ruso", "bielorruso", "ucraniano"
      ];
      if (noAptos.some(n => nacionalidad.includes(n))) {
        candidato.esApto = false;
      }
    }

    if (candidato.paso === 6) {
      // Menores
      if (mensaje.toLowerCase().includes("s√≠") || mensaje.toLowerCase().includes("si")) {
        candidato.esApto = false;
      }
    }

    if (candidato.paso === 7) {
      // Fumar
      if (mensaje.toLowerCase().includes("s√≠") || mensaje.toLowerCase().includes("si")) {
        candidato.esApto = false;
      }
    }

    if (candidato.paso === 8) {
      // Mascotas
      if (mensaje.toLowerCase().includes("s√≠") || mensaje.toLowerCase().includes("si")) {
        candidato.esApto = false;
      }
    }
  }

  // Si a√∫n quedan preguntas
  if (candidato.paso < flujoPreguntas.length) {
    respuesta = flujoPreguntas[candidato.paso];
    candidato.paso++;
  } else {
    // Entrevista completada
    candidato.completado = true;

    if (candidato.esApto) {
      respuesta =
        "Gracias por tus respuestas. ‚úÖ\n\n" +
        "Para continuar, necesitamos un n√∫mero de tel√©fono y un correo electr√≥nico para ponernos en contacto contigo y ense√±arte fotos y v√≠deos de la habitaci√≥n. " +
        "¬øPodr√≠as facilit√°rnoslos, por favor?";
    } else {
      respuesta =
        "Gracias por tus respuestas. üôè\n\n" +
        "Actualmente no tenemos una habitaci√≥n que cumpla con tus necesidades. " +
        "Nos pondremos en contacto contigo cuando haya alguna disponible.";
    }

    // Reiniciar entrevista (opcional, para que pueda empezar otra vez)
    // candidatos[sessionId] = { paso: -1, respuestas: {}, esApto: true, completado: false };
  }

  res.json({ respuesta });
});

// Puerto din√°mico para Render
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Servidor escuchando en puerto ${PORT}`);
});
